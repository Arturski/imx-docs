---
id: 'minting-on-immutable-x'
title: 'Minting on ImmutableX'
slug: '/minting-on-immutable-x'
sidebar_position: 4
keywords:
  - imx-games
---

This guide provides context on the steps required to list your game items, collectibles, or other ERC-721 assets (otherwise known as NFTs) on ImmutableX. It's a good overview of tasks and concepts if you're new to the space, or if you want to learn more about the benefits of minting on ImmutableX. :::info Ready to start?  
If you're already across the details and ready to get started, see our [onboarding guide](../guides/onboarding/index.md)
:::

## 장점

ImmutableX is a “Layer 2” (L2) scaling solution built on top of Ethereum, otherwise known as Layer 1 (L1). ImmutableX inherits the network and security of the Ethereum blockchain, and allows customers to mint and trade NFTs at zero gas cost, carbon-neutrally, and at more than 9,000 transactions per second (TPS) — whereas Ethereum currently does 5.

이뮤터블 X의 작동 방식에 대해 더 알고 싶다면 다음을 확인하십시오.

- [아키텍처 개요](../overview/architecture-overview.md)
- [이더리움 확장성](../overview/ethereum-scalability.md)

## 유동성

ImmutableX has a shared assetbook and a shared orderbook. Every asset minted into ImmutableX is stored in the shared assetbook. This enables any application on ImmutableX to view and display the assets of any other application. In addition, every order submitted to ImmutableX is stored by Immutable and made available to all marketplaces, which helps deliver the best liquidity outcome for projects on ImmutableX.

Building on ImmutableX means that you:

- 거래를 위해 자신의 오더북을 구축, 관리, 유지할 필요가 없습니다.
- 단일 마켓플레이스 외부에 존재하는 수요층에 접근할 수 있습니다.

그 예는 다음과 같습니다.

- 프로젝트 A(마켓플레이스 A)가 NFT(NFT-A)를 마켓플레이스 A에 상장합니다.
- 프로젝트 B(마켓플레이스 B)가 NFT-A를 마켓플레이스 B에 표시합니다.
- 프로젝트 B 사용자들이 NFT를 보고 마켓플레이스 B에서 NFT-A를 구매합니다.
- NFT-A의 판매가 완료됩니다.

이 예시에서 마켓플레이스 A는 마켓 메이커 수수료를 받고 마켓플레이스 B는 판매에 대한 마켓 테이커 수수료를 받습니다. 요약하자면, 하나 이상의 마켓플레이스에 오더를 상장하면 오더가 더욱 빨리 팔리거나 경매인 경우 더 큰 가격에 팔릴 가능성이 높아진다는 뜻입니다.

**[수수료에 대해 더 알아보기](../guides/fees/index.md)**

## 자산 메타데이터

메타데이터의 종류에는 두 가지가 있습니다.

- **이뮤터블 메타데이터** — 자산 생성 시 설정되고 증명으로 실행되며 L2 민팅된 NFT가 처음으로 인출될 때 [온체인](./minting-on-immutable-x.md#on-chain-versus-off-chain)에서 사용할 수 있습니다. 온체인 메타데이터는 [블루프린트](./minting-on-immutable-x.md#metadata-blueprint) 또는 `mintingBlob`에 저장됩니다. 여기에 IPFS 해쉬 또는 L1에서 액세스하고자 하는 값 등의 영구 속성을 저장해야 합니다.
- **가변 메타데이터** — 애플리케이션에 의해 완전히 제어되며, 온체인에 기록되지 않아 가변 메타데이터는 마켓플레이스가 자산을 사용자에게 정확히 설명하는 데 가장 유용합니다. To ensure your NFT appears in marketplaces built on ImmutableX correctly, it is recommended that every project register a metadata schema for their collection. [더 알아보기](../guides/asset-management/asset-metadata.mdx).

## 온체인 대 오프체인

온체인 메타데이터는 스마트 컨트랙트 자체 내에서 자산에 설정한 속성 또는 특징을 말하는 것으로, 온체인이라고도 알려진 블록체인에 저장된 데이터를 뜻합니다.

온체인 데이터의 목적은 희소성이나 캐릭터 유형과 같은 NFT의 값을 고유하게 식별하는 것이지만 온체인에는 가능한 한 적은 데이터를 저장해야 합니다. NFT가 예술작품이나 기타 미디어의 형태를 하고 있는 경우, 전체 JPEG를 블록체인에 업로드하려면 엄청난 비용이 들게 됩니다. 이것이 바로 대부분의 NFT 메타데이터가 일반적으로 오프체인에 저장되는 이유입니다.

NFT는 오프체인 메타데이터를 위해 인터넷 식별자(Uniform Resource Identifier, URI)를 사용하곤 하는데, 이것은 해당 특정 자산의 메타데이터가 보통 JSON의 형식으로 저장된 외부 오프체인 리소스에 대한 링크입니다. 이 URI는 [ERC-721 standard](../overview/introduction-smart-contracts.md#erc721)의 일부로 `tokenURI` 필드에 저장됩니다.

```solidity
function tokenURI(uint256 _tokenId) external view returns (string);
```

이 데이터는 오프체인이기 때문에 저장소를 제어할 수 있는 사람이라면 누구든지 이것을 변경할 수 있습니다. 예를 들어 서버가 셧다운된다면 더 이상 메타데이터에 액세스할 수 없습니다. 이러한 염려 때문에 개발자들은 이 오프체인 데이터의 안정성과 불변성을 보장하기 위해 [IPFS](https://docs.ipfs.io/) 해시 또는 링크의 사용을 선택하곤 합니다.

## 메타데이터 API

프로젝트는 자산의 메타데이터를 위한 엔드 포인트를 포함해 자신의 미디어 자산뿐만 아니라 메타데이터가 정의한 기타 미디어까지 모두 자체 호스팅해야 합니다. When [registering your collection's contract](../guides/onboarding/collection-registration.mdx) with ImmutableX, you need to provide a metadata API endpoint for us to retrieve metadata properties for each of your NFTs.

이뮤터블의 메타데이터 크롤러는 새로운 토큰의 민팅 시 `<metadata_api_url>/<token_id>`에 액세스합니다. 그것은 `/<token_id>`을 `https://metadata_api_url.com/1`과 같이 metadata_api_url에 덧붙입니다.

중요 사항:

- 엔드 포인트가 민팅될 각 토큰 ID에 대한 JSON 응답을 반환하도록 하십시오.
- 엔드 포인트 URL은 유효한 `https` 주소여야 합니다. IPFS를 사용하는 경우, (공개가 아닌) 전용 게이트웨이를 설정해야 합니다.
- 메타데이터 엔드 포인트는 민팅량에 따라 많은 양의 요청을 처리할 수 있어야 합니다. 몇 번의 재시도 후에 크롤러에 응답을 제공하는 데 실패하는 경우, 또는 속도 제한에 걸리는 경우, 자산은 메타데이터 없이 표시될 수 있습니다.
- 제공하는 API URL에 어떤 후행 문자도 포함하지 마십시오. 예를 들어 `https://metadata_api_url.com/`를 제출하면, `/<token_id>`로 읽어 https://metadata_api_url.com//1가 됩니다.
- 메타데이터 엔드 포인트가 도메인의 루트에 있을 필요는 없습니다. 예를 들어 `https://api.metadata.com/token`는 여전히 유효한 메타데이터 URL이며 `https://api.metadata.com/token/1`의 크롤이 됩니다.

컬렉션의 자산이 민팅된 후, 이뮤터블은 데이터베이스에서 이 엔드 포인트가 반환하는 메타데이터를 저장하고 차후 호출자들은 이 [메타데이터 속성](../guides/asset-management/asset-metadata.mdx#core-properties)을 (메타데이터 스키마에서 규정된 것과 같이) API에 대한 필터링 쿼리에서 사용할 수 있습니다.

:::info 메타데이터 업데이트
컬렉션의 메타데이터 스키마는 [컬렉션 메타데이터 스키마를 편집](/docs/metadata-schema-registration#edit-metadata-schema)하여 업데이트할 수 있습니다.

변경한 내용을 바탕으로 자산 메타데이터 값을 업데이트하기 위해, [메타데이터 새로 고침](/docs/asset-metadata-refreshes)을 요청할 수 있습니다. 사용자는 재크롤링할 토큰과 메타데이터 API를 통해 업데이트된 내용을 식별해야 합니다.

이뮤터블은 2 영업일(호주 시간) 이내에 요청을 처리하는 것을 목표로 하고 있습니다. 하지만 요청에 따라 더 오랜 시간이 소요될 수도 있습니다.
:::

## 메타데이터 블루프린트

The blueprint is a required field defined at the time of minting on ImmutableX for each NFT. This represents the on-chain immutable metadata of the NFT that will be written to the blockchain when it is withdrawn from ImmutableX.

블루프린트 스트링은 어떤 형식도 될 수 있습니다. 일반적으로는 콤마로 구분되는 스트링(예: "100,water,2,3")이거나 IPFS 해시입니다. 블루프린트 문자열은 스마트 컨트랙트에 있는 `mintFor` 기능으로 전달되며 거기서 문자열을 온체인으로 디코딩할 사용자 정의 로직을 구현하거나 그대로 저장할 수 있습니다.

블루프린트가 어떻게 사용되는지 더 잘 이해하려면, [imx-contracts repo](https://github.com/immutable/imx-contracts)에 있는 스마트 컨트랙트 템플릿을 살펴보십시오. :::info Blueprint data  
The metadata that appears on ImmutableX does not read any data from the blueprint, so there's no reason to define a blueprint as an entire JSON string. 대신 링크, 해시, 몇 개의 선별된 속성으로 구성하여 스마트 컨트랙트의 사용자 지정 매핑에서 선택적으로 디코딩하고 저장할 수 있습니다.

# 레이어 2에서의 민팅

For a smart contract to work with ImmutableX, we need an implementation of a `mintFor` function, which is what our STARK contract calls at the time of withdrawing a minted token from L2 to L1. 또한 컨트랙트에는 컨트랙트의 소유자를 식별하기 위해 `owner()` 함수도 필요합니다. 민팅된 토큰은 L1 리프리젠테이션, 토큰 ID, 이뮤터블 메타데이터를 갖게 되지만, L2에서 민팅하는 시점에 스마트 컨트랙트 상호작용은 일어나지 않습니다.

## 토큰 ID

When minting on ImmutableX, you will give us the token ID, which is the L1 token ID representing the token in your smart contract. Please note, while the token ID is typed as string, it still needs to be a valid uint256 as per the ERC-721 token standard. 위에서 언급한 것처럼, 각 토큰의 [blueprint](./minting-on-immutable-x.md#metadata-blueprint) 또한 제공해야 합니다. 블루프린트는 (토큰 ID와 함께) `mintFor` 기능으로 전달될 NFT의 온체인, 이뮤터블 메타데이터를 나타냅니다.

레이어 1 스마트 컨트랙트에서 ERC-721 토큰 ID가 민팅 함수에서 증가하는 것은 일반적인 일입니다. With ImmutableX, the token ID is defined at the time of minting to ImmutableX and passed to the `mintFor` function in the minting blob, which then gets decoded into the respective ID and blueprint variables. 사용자는 스스로 토큰 ID를 계속 추적하여 민팅을 할 때마다 오프체인으로 ID를 증가시켜야 합니다.

또한 L2에서 민팅할 때 제공되는 토큰 ID는 고유해야 합니다. 동일한 토큰 ID를 제공하면 API 오류가 발생할 수 있으며, 동일한 토큰 ID는 오류 메시지와 함께 반환됩니다. 예를 들어 사용자의 민팅 요청이 `10`이라는 ID를 가진 토큰을 포함하고 있고 사용자의 컬렉션에 이미 `10`이라는 ID를 가진 토큰이 존재한다면, `Error inserting asset, duplicate ID and token address: [10]`라는 오류 메시지가 출력됩니다.

**[스마트 컨트랙트 소개에서 더 알아보기](../overview/introduction-smart-contracts.md)**

## 민팅 가능한 컨트랙트

기존 스마트 컨트랙트를 보유하고 있고 그 안에 자산을 민팅해 넣고 싶다면, 프록시 컨트랙트를 설정하여 `mintFor` 행동을 구현하고, 민팅하지 않은 사용자의 ERC-721 컨트랙트에서 민팅할 수 있도록 이 프록시 컨트랙트가 적절한 승인을 얻을 수 있게 해야 합니다. 새 'minter' 프록시 컨트랙트를 허용하기 위해서는 메인 컨트랙트가 충분히 유연한 승인 구조를 채택해야 합니다.

## 자산 민팅

하나의 API 호출에서 하나 이상의 자산을 민팅할 수 있으며, 다중 사용자에게 다중 자산을 민팅하는 것도 가능합니다. 민팅은 [컬렉션의 컨트랙트가 등록된](../guides/onboarding/collection-registration.mdx) 후에 시작할 수 있습니다.

주의해야 할 내용은 다음과 같이 요약됩니다.

- **온체인 속성** — 사용자의 컨트랙트에 [온체인 속성](./minting-on-immutable-x.md#on-chain-versus-off-chain)이 포함되어 있다면, 민팅 기능의 [블루프린트 메타데이터](./minting-on-immutable-x.md#metadata-blueprint)로 전달하십시오. 이는 그 속성들이 `mintFor`가 인출 중에 받는 유일한 추가적인 값이기 때문입니다.
- **토큰 URI** — 자산이 인출되는 경우 어떤 데이터가 온체인에 있어야 하는지 고려하십시오. 속성을 온체인에 포함하기 위해 기본 URI는 종종 IPFS와 같은 탈중앙 파일 서비스를 가리키는 데 사용됩니다. 이는 나머지 데이터가 결코 변경되지 않고 모두 온체인에 있지 않은 상태에서도 검색될 수 있게 해줍니다.
- **토큰 ID 변경 불가** — 민팅 시 사용자는 자산의 [ID를 설정](./minting-on-immutable-x.md#token-id)합니다. 하지만 이 ID는 나중에 변경할 수 없습니다.
- **토큰 ID는 반드시 고유해야** – 민팅 시 제공하는 토큰 ID는 [위에서 설명한 것처럼](./minting-on-immutable-x.md#token-id) 동일한 컬렉션에서 이미 사용하고 있지 않아야 합니다.
- **민팅 처리량** — 이뮤터블 X는 민팅 요청당 더 적은 수의 민팅을 처리하면서 민팅을 여러 번 수행하기보다, 민팅 요청당 더 많은 수의 민팅을 한 번에 처리하기를 권장합니다. 동시에 요청할 수 있는 민팅 수량에 제한은 없지만, 민감한 재시도 메커니즘을 가진 `429` http 상태 코드(너무 많은 요청)을 처리해야 합니다. 예를 들어 일 초간 기다렸다 다시 시도하십시오. 같은 오류가 발생하면, 2초간 기다렸다 다시 시도하는 식으로 반복하십시오.
- **자산 ID의 길이** – 자산 ID는 온체인 민팅의 일부임을 기억하십시오. 컬렉션의 소유자가 자산을 L1으로 인출하는 경우, 사용하는 ID가 클수록 매수자가 L1에서 인출하고 트랜잭션하는 데 지불하는 가스비가 커집니다.

**[자산 민팅에 대해 더 읽기](../guides/asset-management/asset-minting.md)**
