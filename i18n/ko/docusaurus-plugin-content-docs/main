---
id: 'asset-burning'
title: 'Asset Burning'
slug: '/asset-burning'
excerpt: 'ImmutableX now supports asset burning :fire:'
sidebar_position: 8
keywords:
  - imx-games
---

소각은 토큰을 유통망과 메인넷 이더리움에서 영구적으로 제거하는 절차를 뜻하는 것으로, 지정된 소각 주소로 자산을 이동하여 소각하는 경우가 많습니다(예: [제로 계정](https://etherscan.io/address/0x0000000000000000000000000000000000000000)). 어떤 사용자도 소각 주소를 소유하지 않으며 누구도 그 개인 키를 추정할 수 없기에, 소각 주소가 소유한 자산은 영원히 소실된 것으로 간주됩니다.

On L2, we have a burn address (zero address - 0x00...0) paired with a non-zero STARK key (0x00...01) as the designated burn address for ImmutableX. The STARK key must be non-zero because a zero STARK key does not lie on the STARK elliptic curve and would therefore be invalid, so we chose the next closest key possible. As with the L1 burn account, finding the STARK private key for this specific public key is practically impossible, so assets owned by this STARK key will remain locked in the STARK smart contract forever and cannot be transferred or withdrawn.

자산을 소각하려면 **자산을 소각 주소로 전송**해야 합니다. 이를 명확히 하기 위해 이뮤터블 X는 SDK에 여러 소각 기능을 추가하였으며, 이 기능들은 이 소각 주소로 연결된 표준 전송 기능의 래퍼에 불과합니다. 소각 주소를 수령인으로 하여 전송 기능을 사용해도 효과는 동일합니다.

```solidity
BurnEthAddress = 0x0000000000000000000000000000000000000000
BurnStarkKey   = 0x0000000000000000000000000000000000000000000000000000000000000001
```

## ImmutableXClient

SDK의 명시적 소각 기능(전송 기능의 래퍼):

'@theme/Tabs'에서 Tabs 가져오기 '@theme/TabItem'에서 TabItem 가져오기

<Tabs>
<TabItem value="burn" label="Burn an Asset" default>

</TabItem>
<TabItem value="list" label="Get list of Burns">

</TabItem>
<TabItem value="burn-by-id" label="Get burn by ID">

</TabItem>
</Tabs>

또는 표준 전송 기능 사용하기:

```typescript title="Burn using client.transfer"
// import { ImmutableXClient } from '@imtbl/imx-sdk';
// client = ImmutableXClient.build({...})

await client.transfer({
  sender: '<wallet-address>',
  token: {
    type: ERC721TokenType.ERC721,
    data: {
      tokenId: '123',
      tokenAddress: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',
    },
  },
  receiver: '0x0000000000000000000000000000000000000000',
  quantity: 1,
});
```

소각된 자산이라 하더라도 '소각된(burned)' 상태로 getAssets(`/assets` API)에 응답합니다. 이것은 필터링이 가능한 필드이므로 자산 API를 쿼리하여 소각된 자산을 모두 찾을 수 있습니다.

```typescript title="Get burned assets"
// import { ImmutableXClient, ImmutableAssetStatus } from '@imtbl/imx-sdk';
// client = ImmutableXClient.build({...})

const burnedAssets = await client.getAssets({
  status: ImmutableAssetStatus.burned, // '소각됨'
});
```

## 링크

프론트엔드에서 사용자를 위한 소각 기능을 구현하려면, 수령인을 소각 주소로 설정하여 `link.transfer` 기능을 사용해야 합니다. [더 알아보기.](../link-sdk/linktransfer.md)

```typescript title="Burn with Link"
// '@imtbl/imx-sdk'에서 { Link } 불러오기;
// link = new Link(<link-url>)

const transferResponsePayload: TransferV2ResultsCodec = await link.transfer([
  {
    type: ERC721TokenType.ERC721,
    tokenId: '123',
    tokenAddress: '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c',
    toAddress: '0x0000000000000000000000000000000000000000',
  },
]);
```

## 다중 소각

한 번에 여러 개의 자산을 소각할 때는 link.transfer에서 다중 전송 기능을 이용합니다. 이것은 별도의 전송 트랜잭션을 API에 제출한다는 점을 기억하십시오. 드물기는 하지만, 다른 전송은 성공했는데 일부 전송은 실패하는 경우가 발생할 수도 있어 다중 소각은 (다중 전송과 마찬가지로) 완전한 원자성 조작이 아닙니다. 이뮤터블 X는 앞으로 모든 기능에 원자성의 '다중' 트랜잭션 지원 추가를 검토할 예정입니다.

'새 NFT를 수령하기 위해 x개의 NFT를 소각'하는 식으로 사용하는 경우, 모든 성공한 소각과 실패한 소각을 계속해서 기록하고(`link.transfer` 응답에서 제공), 소각 과정의 다음 단계에 들어가기 전에 사용자들이 모든 소각을 완료할 수 있도록 재시도 메커니즘을 구현할 것이 현재 권장됩니다.
