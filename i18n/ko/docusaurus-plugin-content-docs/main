---
id: "contributing"
title: "Contributing to these docs"
slug: "/contributing"
excerpt: "How to contribute to ImmutableX's open source documentation"
sidebar_position: 6
keywords:
  - imx-dx
---

# Contributing to ImmutableX Documentation 🙌

## Github 리포지토리

[https://github.com/immutable/imx-docs](https://github.com/immutable/imx-docs)

## 왜 기여해야 하나요?

web3를 시작하는 것은 경험이 많은 개발자들에게도 어려운 일입니다. 새로운 패러다임도 굉장히 많고 배워야 할 작업 방식도 많습니다. 잘 만들어진 문서는 학습 과정을 가볍게 만들어주고 개발자들이 자신의 목표를 효율적으로 달성할 수 있게 해줍니다.

한동안 web3를 구축해왔다면, 프로젝트의 문서를 전부 읽는다고 해서 플랫폼에서의 생산성이 즉시 좋아지는 것은 아니라는 것을 알고 계실 겁니다. 문제에 부딪치게 될 수도 있고 해결방법이 즉시 떠오르지 않을 수도 있습니다. 같은 문제를 겪는 사람들이 있을 수도 있지만 가장 수준 높은 검색 달인도 해결 방법을 찾지 못할 수 있습니다. [XKCD 979](https://xkcd.com/979/)은 이런 감정을 정확히 표현합니다.  하지만 인내심을 가지고 문제의 해결책을 찾았을 때 그 안도감과 자신감은 타의 추종을 불허합니다.

이뮤터블은 개발자들이 자신과 유사한 학습 여정을 통과하고 있는 이들에게 자신의 지식을 기부하고 수백 명의 개발 경험에 거대한 영향을 미치고 그로 인해 인정받을 수 있게 만들고자 합니다. 또한 장래에는 중요한 공헌에 대한 보상도 제공할 예정입니다. 더 자세한 내용은 이 공간을 확인하십시오!

## 기여 시작하기:

기여를 시작할 수 있는 일반 주제 목록이 있습니다. 이 목록은 완전하지 않으며 시작할 만한 몇 개의 아이디어에 불과합니다.

* **ImmutableX Developer Assistance**
  * 가이드 방법
    * 예: 어떻게 자산을 L1으로 인출하나요?
  * 튜토리얼
    * eg: Building a marketplace with ImmutableX
* **기존 콘텐츠의 유지 관리**
  * 문서, 튜토리얼 유지 및 최신으로 유지하는 방법 가이드
    * 구식 커맨드를 업데이트
    * 오타 찾기 및 수정
    * 도움이 되는 컨텍스트/팁 추가
    * 다른 기여자들이 해결할 수 있는 문제 제기하기
    * 검색 가능성, 정확성, 관련성, 명확성이 향상되도록 편집하기
* **기존 문제 고치기**
  * [Github의 문제 페이지](https://github.com/immutable/imx-docs/issues)로 가서 고칠 문제 고르기

기여에 많은 노력이 들거나 문서의 거대한 재건 작업 또는 개편 작업을 하는 중이라면 작업을 시작하기 *전* [Github에서 문제를 열어](https://github.com/immutable/imx-docs/issues/new) 관리인과 아이디어에 관해 논의하십시오. 그렇게 하면 필요한 컨텍스트를 모두 얻을 수 있고 재작업량을 줄이면서 최대의 효과를 낼 수 있습니다.

## Contribute ImmutableX Docs:

There are a couple of ways to contribute to the [ImmutableX Docs:](https://github.com/immutable/imx-docs)

1. [변경 내용과 함께 Pull requet(PR) 보내기](contributing.md)
2. [문제 제출하기](contributing.md)

### 변경 내용과 함께 Pull requet(PR) 보내기

Github 리포지토리: [https://github.com/immutable/imx-docs](https://github.com/immutable/imx-docs)

이뮤터블의 문서 웹 사이트는 [Docusaurus](https://docusaurus.io/) 오픈 소스 플랫폼을 사용합니다. Docusaurus는 [React](https://reactjs.org/)와 [MDX](https://mdxjs.com)로 구축된 정적 사이트 생성기(static-site generator)입니다. SEO 친화적인 단일 페이지 애플리케이션(single-page application, SPA)를 구축합니다. 하지만 기여하기 위해 React를 배울 필요는 없습니다. 모든 문서는 [Markdown](https://docusaurus.io/docs/markdown-features)에 기록됩니다. 방법에 대해 더 알아보려면 다음을 읽어 보십시오.
- 페이지 추가
- 사이트바 섹션 수정
- 풋터 수정
- 사이드바 순서 변경
- URL 슬러그 설정
- 경고 추가 방법
- 코드 블록 추가 방법

#### 1. Fork the [ImmutableX Docs repository](https://github.com/immutable/imx-docs)

> 리포지토리로 가는 방법을 알아보려면, [리포지토리 포크하기에 대한 Github 문서](https://help.github.com/en/articles/fork-a-repo)를 확인하십시오.


#### 2. 포크된 리포지토리 복제하기

```shell
git clone git@github.com:[your_github_handle]/imx-docs
```

#### 3. 복제된 폴더로 이동하기

```shell
cd imx-docs
```

#### 4. 복제된 리포지토리를 상위 리포지토리로 연결하기

```shell
git remote add upstream git@github.com:immutable/imx-docs.git
```

> 더 많은 도움이 필요하다면 [GitHub 문서: Configuring a remote for a fork](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork)을 참조하십시오.

#### 5. imx-docs 리포지토리를 복제했다면, 최신 상위 변경 내역에 맞게 포크를 최신으로 유지하십시오.

> 더 많은 도움이 필요하다면 [GitHub 문서: Syncing a fork](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork)를 참조하십시오.

```shell
  git checkout main
  git fetch upstream
  git merge upstream/main
```

#### 6. 변경 사항에 대한 새로운 브랜치 생성하기

```shell
  git checkout -b [new_branch_name]
```

#### 7. 이뮤터블의 Git 가이드라인을 따르면서 변경 사항 커밋하기

```shell
  git commit -m "feat: brief description of changes [Fixes #420]"
```

#### 8. 변경 사항 푸시하기

```
git push
```

#### 9. 커뮤니티 관리자/IMX 팀이 사용자의 PR을 검토합니다

커뮤니티 관리자 또는 IMX 팀이 사용자의 PR을 검토하여 그대로 수용하거나 검토의 일부로 코멘트를 추가합니다. 수용된 PR은 승인되어 `main` 브랜치로 통합됩니다.

### 문제 보고하기

퍼블리싱된 문서에서 버그, 착오 또는 불확실한 요소를 발견했으나 문제를 스스로 고칠 수 없는 경우, 문제를 제기하여 작업할 꺼리를 찾고 있는 기여자들을 도와주십시오!

특정 페이지에서 문제를 발견했고 그에 대한 문제를 제기하고 싶은 경우, 해당 페이지로 이동해 페이지 끝까지 스크롤을 내린 다음 `Edit this page` 버튼을 클릭합니다. 문제 보고서와 함께 방문한 GitHub 페이지의 URL을 포함합니다

- 버그를 보고하기 위해 [새로운 문제](https://github.com/immutable/imx-docs/issues)를 생성한 다음 기능을 요청하거나 변경을 제안하십시오.
- 문제를 할당받고 싶다면 [관리자들이 문제를 사용자에게 할당할 수 있도록](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/) 문제에 코멘트를 달아 주십시오.
- 마음에 둔 특정 문제가 없다면, 모든 [기존 문제](https://github.com/immutable/imx-docs/issues)를 살펴볼 수도 있습니다.
- 추가로 `good first issue` 라벨을 가진 문제는 처음으로 기여하는 사람들에게 이상적입니다.

#### 보안 문제 또는 기타 민감한 문제의 경우, [Discord](https://discord.gg/6GjgPkp464)나 이메일을 통해 커뮤니티 관리자에게 연락해 주십시오.

## Github 기여 가이드라인

고품질 기여를 위해 아래의 가이드라인을 준수해 주십시오.

* **크기**: 가능한 경우 pull request를 작게 유지해 주십시오. IMX는 효과적인 리뷰를 위해 작은 pull request를 선호합니다. 튜토리얼 또는 방법을 알려주는 가이드의 주제가 큰 경우, 주제를 작게 나누어 별도의 PR을 전송하는 것을 권장합니다.
* **품질**: 코드&커밋 메시지는 아래의 가이드라인을 준수해야 합니다.

### 코드 스타일 가이드

코드는 다음을 준수해야 합니다.

- `camelCase`를 사용해 의미있는 변수명을 가져야 합니다.
- `lint` 문제가 없어야 합니다.
- 의미 있는 슬러그, 파일명, 디렉토리명 및 디렉토리 구조를 가져야 합니다.
- 수정, 리팩토링 및 확장이 쉬워야 합니다.

### PR이 해결하는 문제 참조

커밋 메시지에서 해결하는 문제를 참조하십시오. 도움이 필요한 경우 [GitHub 문서: Linking a pull request to an issue using a keyword](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)를 참조해 주십시오.


### 커밋 메시지는 아래의 패턴을 따라야 합니다.

```bash
feat: Description # if a new feature is added
fix: Description # if a bug is fixed
refactor: Description # if code is refactored
docs: Description # if documentation is added
lint: Description # if a lint issue is fixed
```

### 문제는 아래의 패턴을 따라야 합니다

```bash
update: Description # if an update is required for a feature
bug: Description # if there is a bug in a particular feature
suggestion: Description # if you want to suggest a better way to implement a feature
```
