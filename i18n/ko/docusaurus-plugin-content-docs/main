---
id: "marketplaces"
title: 'Marketplaces'
slug: '/marketplaces'
excerpt: '오더 매수 및 매도 관리'
sidebar_position: 4
keywords:
  - imx-traders
---

As an exchange platform, ImmutableX provides all the features needed to create a marketplace for the assets created and stored on the platform. 사용자 계정에서 상장이 생성되면, 현재 모든 오더를 보여주기 위해 별도의 마켓플레이스 섹션을 두는 일은 흔한 일입니다.

## 오더

Orders on ImmutableX all include a buy and sell side. To fill or partially fill an order, an order with the opposite buy and sell tokens is created and sent to ImmutableX. It is important to note there are different _statuses_ an ImmutableX order can have:

- **Active** - 오더가 유효하며 작성 또는 일부 작성될 수 있습니다.
- **Filled** - 오더가 완료되어 자산(들)이 전송되었습니다.
- **Cancelled** - 오더가 취소되어 더 이상 작성할 수 없습니다.
- **Inactive** - 오더가 거부되어 시스템이 원래 트랜잭션의 수정 트랜잭션 수령을 기다리는 동안 그 상태로 있습니다. 어느 한쪽이 거래 가능한 토큰을 더 이상 가지고 있지 않을 때 발생합니다.

## 오더 나열하기

오더를 보여주는 것은 자산과 마찬가지로 IMX 클라이언트에서 가장 잘 액세스할 수 있습니다. 보통 오더에 대해 요청을 할 때는 상태에 대해 필터링합니다. The following call will retrieve all the active orders for assets from the Gods Unchained collection (paged):

```javascript
// Gods Unchained collection adresss
const collectionAddress = '0xacb3c6a43d15b907e8433077b6d38ae40936fe2c'
const ordersRequest = await client.getOrders({
  status: 'active',
  sell_token_address: collectionAddress
})
```

:::info 오더 측면
오더에는 매수 및 매도 측면이 있습니다. 분류 및 필터링 시 각 측면이 고유한 필터링 매개 변수를 갖는다는 점을 기억하십시오.
:::

## 오더 정렬

검색된 오더는 특정한 순서대로 표시되어야 할 것입니다. 토큰명, 가격, 생성 날짜 중 하나의 순서로 말입니다. 오더 요청에 정렬과 방향을 추가하는 것은 간단합니다.

```javascript
//Sort by price, lowest to highest
const ordersRequest = await client.getOrders({
  status: 'active',
  sell_token_address: collectionAddress,
  order_by: 'buy_quantity',
  direction: 'asc',
})
```

## 오더 필터링

오더는 다양한 속성으로 필터링할 수 있습니다. 하지만 가장 일반적으로 사용되는 방식은 자산명 및 자산 메타데이터로 필터링하는 것입니다. 다음은 검색 바 컴포넌트가 자주 사용하는 오더에 대한 자산명 필터링을 보여줍니다.

```javascript
const ordersRequest = await client.getOrders({
  status: 'active',
  sell_token_address: collectionAddress,
  sell_token_name: tokenName,
})
```

메타데이터로 필터링하는 것은 훨씬 복잡합니다. 메타데이터 필터링은 속성 필터링을 포함한 객체를 정의하는 JSON 문자열을 허용합니다. 각 필터링 속성은 필터링하고자 하는 속성의 값을 포함하는 배열입니다. 각 속성의 이름은 정확히 일치해야 합니다.

다음의 예시에서는 쉐도우 또는 골드 품질의 부스트 워커 카드(proto 55)에 대한 갓즈 언체인드 카드 오더를 필터링하는 법을 보여줍니다.

```javascript
const ordersRequest = await client.getOrders({
  status: 'active',
  sell_token_address: collectionAddress,
  sell_metadata: '{"proto":["55"],"quality":["Shadow","Gold"]}',
})
```

**참고:** API로의 호출의 경우, 메타데이터 필터링은 다음과 같이 인코딩되어야 합니다.

```bash
GET https://api.x.immutable.com/v1/assets?collection='0xacb3c6a43d15b907e8433077b6d38ae40936fe2c'&metadata=%7B%22proto%22%3A%5B%2255%22%5D%2C%22quality%22%3A%5B%22Shadow%22%2C%22Gold%22%5D%7D
```

:::info 메타데이터 참고 사항
자산 메타데이터가 어떻게 구성되는냐에 따라 이름도 포함될 수 있습니다. 하지만 디폴트로 각 자산은 메타데이터 외부에 이름 속성을 가지고 있으며 그것이 필터링에 더 안전한 선택입니다. 이름과 메타데이터 필터링을 모두 함께 결합하는 것도 효과적입니다.

## 번호 매기기

오더 요청 또한 자산과 마찬가지로 커서를 반환합니다. 커서를 사용한 번호 매기기 사례로 [사용자 NFT 자산](./personal-inventory.md#user-nft-assets)에서 자산 커서 예시를 살펴보십시오.

## 오더 작성하기

기존 오더를 작성하려면, 서명 절차를 통해 사용자를 안내할 수 있도록 링크 SDK를 사용하십시오. 오더 ID를 사용해 매수를 호출하십시오.

```javascript
await link.buy({ orderIds: [order.order_id] })
```
