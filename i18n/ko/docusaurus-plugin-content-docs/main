---
id: "minting-with-royalties"
title: "Minting with royalties"
slug: "/minting-with-royalties"
sidebar_position: 1
keywords:
  - imx-traders
---

Royalties for a given asset are defined at the point of minting a new asset to the ImmutableX protocol. 민팅하기 전 [수령인을 등록](../user-registration.md)해 주십시오.

## 새로 민팅된 자산의 로열티 수수료
로열티가 적용되는 민팅을 하기 위해서는 `@imtbl/imx-sdk`의 `>= 1.1.3` 버전이 필요합니다.

`minter`를 설정하려면 이 [민팅 예시](../asset-management/asset-minting.md#minting-example)를 참고해 주십시오.

위의 예시와 아래의 예시 간의 차이점은 `mints`의 객체 구조입니다. 이전의 예시에서는 수수료를 지원하지 않아 더 이상 사용되지 않을 것이며 아래의 예시로 대체합니다.
```typescript
const result = await minter.mintV2([
  {
      "contractAddress": "0xc6185055ea9891d5d9020c927ff65229baebdef2",
      "royalties": [ // global fees
          {
              "recipient": "0xA91E927148548992f13163B98be47Cf4c8Cb3B16",
              "percentage": 2.5
          }
      ],
      "users": [
          {
              "etherKey": "0xc3ec7590d5970867ebd17bbe8397500b6ae5f690",
              "tokens": [
                  {
                      // ERC-721
                      "id": "1",
                      "blueprint": "my-on-chain-metadata",
                      "royalties": [ // override global fees on a per-token basis
                          {
                              "recipient": "0xc3ec7590d5970867ebd17bbe8397500b6ae5f690",
                              "percentage": 2.5
                          }
                      ],
                  }
              ]
          },
          {
              "etherKey": "0xA91E927148548992f13163B98be47Cf4c8Cb3B16",
              "tokens": [
                  {
                      // ERC-721
                      "id": "",
                      "blueprint": ""
                  }
              ]
          },
          ...
      ]
  }
]);
```
응답은 다음과 같습니다.
```json
// Returns
{
  [
    {
      "contract_address": string;
      "token_id": string;
      "tx_id": number;
    },
    {
      "contract_address": string;
      "token_id": string;
      "tx_id": number;
    },
    ....
   ]
}
```
*참고: 값은 형식을 나타내는 용도로만 사용됩니다.*

## 중요한 사항
`users.etherKey`는 토큰이 민팅될 유효한 이더리움 지갑 주소를 나타냅니다.

`id`는 시스템의 자산용입니다. 이 ID는 해당 자산과 연관된 메타데이터를 가져오기 위해 컨트랙트 등록 중에 제공된 메타데이터 엔드 포인트와 함께 사용됩니다.

`blueprint` is on chain metadata that will be included as part of the Layer 1 mint if the minted ERC-721 token is withdrawn from ImmutableX onto Layer 1 Ethereum. 현재 빈 스트링이 아닌 한 어떤 스트링이라도 될 수 있습니다.

퍼센티지는 최대 소수점 2자리까지 규정할 수 있습니다. 소수점 2자리를 초과하는 부분은 버려집니다. 이는 반올림으로 모든 구성 퍼센티지의 총합이 100%를 초과하지 않도록 하기 위함입니다.

## 자산 로열티 수수료 보기

사용자는 [자산 API](/reference#/operations/getAsset)를 통해 주어진 자산의 로열티 정보를 볼 수 있습니다. 자산 API는 자산과 관련된 각 로열티의 로열티 수령인과 수수료 퍼센티지를 반환합니다.

수수료의 세부 내역을 요청하는 경우, `1.1.0` 이상 버전으로 업그레이드하십시오. 이는 결과에서 `fees`열이 해당 오더에 존재하고 `include_fees` 플래그가 쿼리파람으로 첨부되지 않는 한 `fees` 열를 생략하는 API에도 적용됩니다. 더 자세한 내용을 알고 싶다면 [API docs](/reference#/operations/listAssets)를 참조해 주십시오.